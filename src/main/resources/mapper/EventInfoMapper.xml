<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.EventInfoMapper">
	<resultMap id="EventInfoResultMap"
		type="com.example.demo.entity.EventInfo">
		<id property="eventInfoId" column="eventInfoId" />
		<result property="eventItemId" column="eventItemId" />
		<result property="eventCourtId" column="eventCourtId" />
		<result property="eventOpenDay" column="eventOpenDay" />
		<result property="eventOpenTimeZone" column="eventOpenTimeZone" />
		<result property="eventOpenTime" column="eventOpenTime" />
		<result property="eventUpdateTime" column="eventUpdateTime" />
		<result property="eventNote" column="eventNote" />
		<result property="eventEnrollment" column="eventEnrollment" />
		<result property="eventMaxEnrollment"
			column="eventMaxEnrollment" />
		<result property="eventMaleCost" column="eventMaleCost" />
		<result property="eventFemaleCost" column="eventFemaleCost" />
		<association property="itemInfo"
			javaType="com.example.demo.entity.ItemInfo" autoMapping="true">
			<id column="itemInfoId" property='itemInfoId' jdbcType="VARCHAR" />
			<result column="itemInfoName" property='itemInfoName'
				jdbcType="VARCHAR" />
		</association>
		<association property="courtInfo"
			javaType="com.example.demo.entity.CourtInfo">
			<id column="courtId" property='courtId' jdbcType="INTEGER" />
			<result column="courtName" property='courtName'
				jdbcType="VARCHAR" />
			<result column="courtDistance" property='courtDiFstance'
				jdbcType="FLOAT" />
			<result column="courtAdress" property='courtAdress'
				jdbcType="VARCHAR" />
		</association>
		<association property="organizer"
			javaType="com.example.demo.entity.Organizer">
			<id column="organizerId" property='organizerId' jdbcType="INTEGER" />
			<result column="organizerName" property='organizerName'
				jdbcType="VARCHAR" />
			<result column="organizerName" property='organizerName'
				jdbcType="VARCHAR" />
		</association>
		<collection property="entryInfoList"
			ofType="com.example.demo.entity.EventEntryInfo" autoMapping="true">
			<id property="infoId" column="infoId" />
			<result column="entryEventInfoId" property='eventInfoId' />
			<result column="entryUserId" property='userId' />
		</collection>
	</resultMap>
	<select id="getEventInfos" resultMap="EventInfoResultMap">
		SELECT * FROM eventinfo
		JOIN iteminfo ON eventinfo.eventItemId =
		iteminfo.itemInfoId
		JOIN courtinfo ON eventinfo.eventCourtId =
		courtinfo.courtId
		JOIN organizer_master ON eventinfo.organizerId =
		organizer_master.organizerId
		<where>
			<if test="eventOpenDay != null">
				(eventOpenDay = #{eventOpenDay})
			</if>
			<if test="eventOpenTimeZone != '' and eventOpenTimeZone != null">
				AND (eventOpenTimeZone = #{eventOpenTimeZone})
			</if>
			<if test="eventItemId != '' and eventItemId != null">
				AND (eventItemId = #{eventItemId})
			</if>
		</where>
	</select>

	<!-- 查找举办日为本日及之后的报名人数未满的活动 -->
	<select id="getAvailableEvents" resultType="map">
		SELECT
		count(e.eventInfoId) as eventCount,
		iteminfo.itemInfoName
		FROM eventinfo
		e
		LEFT JOIN (
		SELECT
		eventInfoId,
		COUNT(*) AS eventEntryCount
		FROM
		event_entry_info
		GROUP BY eventInfoId
		) ei ON ei.eventInfoId =
		e.eventInfoId
		left join iteminfo
		on e.eventItemId = iteminfo.itemInfoId
		where e.eventOpenDay>= CURDATE()
		AND (COALESCE(ei.eventEntryCount,
		0)+e.eventEnrollment &lt;=
		e.eventMaxEnrollment)
		group by
		iteminfo.itemInfoName;
	</select>

	<!-- 查找参加日之前的指定活动的报名情况,输出结果为主办方名称、报名上限、现在报名人数 -->
	<select
		id="getAvailableEventsOrganizerNameAndMemberNumsByItemId"
		resultType="map">
		SELECT
		e.eventInfoId,
		organizer_master.organizerName,
		iteminfo.itemInfoName,
		COALESCE(ei.eventEntryCount,
		0)+e.eventEnrollment AS entryCount,
		e.eventMaxEnrollment
		FROM eventinfo
		e
		LEFT JOIN (
		SELECT
		eventInfoId,
		COUNT(*) AS eventEntryCount
		FROM
		event_entry_info
		GROUP BY eventInfoId
		) ei ON ei.eventInfoId =
		e.eventInfoId
		left join iteminfo
		on e.eventItemId = iteminfo.itemInfoId
		left join organizer_master
		on e.organizerId =
		organizer_master.organizerId
		where e.eventOpenDay>= CURDATE()
		and
		e.eventItemId = #{eventItemId}
		AND (COALESCE(ei.eventEntryCount,
		0)+e.eventEnrollment &lt;=
		e.eventMaxEnrollment)
		order by
		iteminfo.itemInfoName;
	</select>

	<select id="getEventInfosByUserId"
		resultMap="EventInfoResultMap">
		SELECT
		eventinfo.*,
		iteminfo.*,
		courtinfo.*,
		organizer_master.*,
		event_entry_info.infoId,
		event_entry_info.mailAddress,
		event_entry_info.nickName,
		event_entry_info.eventInfoId as entryEventInfoId,
		event_entry_info.userId as entryUserId,
        event_entry_info.entryTime
		FROM
		eventinfo
		JOIN
		courtinfo ON eventinfo.eventCourtId = courtinfo.courtId
		JOIN
		organizer_master ON eventinfo.organizerId = organizer_master.organizerId
		JOIN
		iteminfo ON eventinfo.eventItemId = iteminfo.itemInfoId
		LEFT JOIN
		event_entry_info ON eventinfo.eventInfoID = event_entry_info.eventInfoId
		AND event_entry_info.isCancel = 0
		WHERE
		eventinfo.organizerId IN (
		SELECT organizerId
		FROM organizer_master
		WHERE userId = #{userId}
		)
		ORDER BY
		eventinfo.eventOpenDay,
		eventinfo.eventOpenTimeZone,
		eventinfo.eventItemId;
	</select>

	<delete id="deleteEventInfoByEventInfoId" parameterType="int">
		DELETE
		FROM eventinfo
		WHERE eventInfoId = #{eventInfoId}
	</delete>

	<update id="updateEventInfo" parameterType="EventInfo">
		UPDATE eventinfo
		SET
		eventItemId = #{eventItemId},
		eventCourtId = #{eventCourtId},
		eventOpenDay = #{eventOpenDay},
		eventOpenTimeZone =
		#{eventOpenTimeZone},
		eventOpenTime = #{eventOpenTime},
		eventUpdateTime
		= #{eventUpdateTime},
		eventEnrollment = #{eventEnrollment},
		eventMaxEnrollment = #{eventMaxEnrollment},
		eventMaleCost =
		#{eventMaleCost},
		eventFemaleCost = #{eventFemaleCost}
		WHERE
		eventInfoId
		= #{eventInfoId}
	</update>
</mapper>